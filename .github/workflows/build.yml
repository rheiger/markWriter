name: Build Desktop Apps

# Required for publishing releases from the workflow
permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

jobs:
  build-macos:
    name: macOS
    runs-on: macos-14
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: CLI smoke test (--version)
        run: |
          python markwrite.py --version

      - name: Generate app icon
        run: |
          python tools/generate_icon.py

      - name: Build app with PyInstaller
        run: |
          pyinstaller -y MarkWrite.spec

      - name: Debug - List dist contents
        run: |
          echo "=== Contents of dist directory ==="
          ls -la dist/
          echo "=== Contents of dist/MarkWrite directory ==="
          ls -la dist/MarkWrite/ || echo "MarkWrite directory not found"
          echo "=== Contents of dist/MarkWrite.app directory ==="
          ls -la dist/MarkWrite.app/ || echo "MarkWrite.app directory not found"

      - name: Prepare zip name
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            VERSION="latest"
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "ZIP_NAME=MarkWrite-$VERSION-macOS.zip" >> "$GITHUB_ENV"

      - name: Zip app
        run: |
          ditto -c -k --sequesterRsrc --keepParent dist/MarkWrite.app "dist/${ZIP_NAME}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: dist/${{ env.ZIP_NAME }}

      # macOS job only builds and uploads artifact; publishing is done in a separate job

  build-windows:
    name: Windows
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Generate app icon
        run: |
          python tools/generate_icon.py

      - name: CLI smoke test (--version)
        run: |
          python markwrite.py --version

      - name: Prepare version
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            VERSION="latest"
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "ZIP_NAME=MarkWrite-$VERSION-windows.zip" >> "$GITHUB_ENV"

      - name: Build app with PyInstaller (Windows)
        run: |
          pyinstaller -y MarkWrite-win.spec

      - name: Build NSIS installer
        shell: pwsh
        run: |
          if (-not (Get-Command makensis -ErrorAction SilentlyContinue)) {
            choco install nsis -y
          }
          $version = "$env:VERSION"
          if ([string]::IsNullOrEmpty($version)) { $version = "latest" }
          makensis /DVERSION=$version installer\windows\markwrite.nsi
          echo "NSIS_EXE=dist/MarkWrite-$version-Setup.exe" >> $env:GITHUB_ENV

      - name: Zip app
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            VERSION="latest"
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "ZIP_NAME=MarkWrite-$VERSION-windows.zip" >> "$GITHUB_ENV"
          7z a -tzip "dist/${ZIP_NAME}" dist/MarkWrite/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/${{ env.ZIP_NAME }}
            ${{ env.NSIS_EXE }}

      # Windows job only builds and uploads artifacts; publishing is done in a separate job

  build-linux:
    name: Linux
    if: false # disabled for now
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libxkbcommon0 libxrender1 libxext6 libx11-6 libdbus-1-3 libglib2.0-0 libxcomposite1 libxi6 libxcursor1 libxdamage1 libxtst6 libnss3 libasound2

      - name: Install Python dependencies
        run: |
          python -m pip install -U pip
          pip install -r requirements.txt

      - name: Build app with PyInstaller (Linux)
        run: |
          pyinstaller -y MarkWrite-linux.spec

      - name: Zip app
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            VERSION="${GITHUB_REF_NAME#v}"
          else
            VERSION="latest"
          fi
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "ZIP_NAME=MarkWrite-$VERSION-linux.zip" >> "$GITHUB_ENV"
          cd dist && zip -r "${ZIP_NAME}" MarkWrite

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ZIP_NAME }}
          path: dist/${{ env.ZIP_NAME }}

      - name: Publish GitHub Release (Linux)
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          files: dist/${{ env.ZIP_NAME }}
          generate_release_notes: true

  publish-release:
    name: Publish Release
    needs: [build-macos, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: '*'
          path: release_assets
          merge-multiple: true

      - name: List assets to publish
        run: |
          ls -lAh release_assets

      - name: Publish GitHub Release (combined)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_assets/**
          generate_release_notes: true
